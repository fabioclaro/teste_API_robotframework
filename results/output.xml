<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 6.0.2 (Python 3.10.6 on linux)" generated="20230524 18:29:14.069" rpa="false" schemaversion="3">
<suite id="s1" name="Api Testing Usuarios" source="/home/clarotunala/Projetos/CursoUdemy/RobotFramework/apiTesting/tests/api_testing_usuarios.robot">
<test id="s1-t1" name="Cenário 01: Cadastrar um novo usuário com sucesso no ServeRest" line="7">
<kw name="Criar um novo usuário" library="api_testing_usuarios">
<kw name="Generate Random String" library="String">
<var>${palavra_aleatoria}</var>
<arg>length=4</arg>
<arg>chars=[LETTERS]</arg>
<doc>Generates a string with a desired ``length`` from the given ``chars``.</doc>
<msg timestamp="20230524 18:29:14.148" level="INFO">${palavra_aleatoria} = VeXG</msg>
<status status="PASS" starttime="20230524 18:29:14.148" endtime="20230524 18:29:14.148"/>
</kw>
<kw name="Convert To Lower Case" library="String">
<var>${palavra_aleatoria}</var>
<arg>${palavra_aleatoria}</arg>
<doc>Converts string to lower case.</doc>
<msg timestamp="20230524 18:29:14.149" level="INFO">${palavra_aleatoria} = vexg</msg>
<status status="PASS" starttime="20230524 18:29:14.148" endtime="20230524 18:29:14.149"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${EMAIL_TEST}</arg>
<arg>${palavra_aleatoria}@emailteste.com</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230524 18:29:14.150" level="INFO">${EMAIL_TEST} = vexg@emailteste.com</msg>
<status status="PASS" starttime="20230524 18:29:14.149" endtime="20230524 18:29:14.150"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${EMAIL_TEST}</arg>
<doc>Logs the given message to the console.</doc>
<status status="PASS" starttime="20230524 18:29:14.150" endtime="20230524 18:29:14.150"/>
</kw>
<status status="PASS" starttime="20230524 18:29:14.147" endtime="20230524 18:29:14.150"/>
</kw>
<kw name="Cadastrar o usuário criado no ServeRest" library="api_testing_usuarios">
<kw name="Create Dictionary" library="BuiltIn">
<var>${bory}</var>
<arg>nome=Tifulano da Silva</arg>
<arg>email=${EMAIL_TEST}</arg>
<arg>password=1234</arg>
<arg>administrador=true</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230524 18:29:14.151" level="INFO">${bory} = {'nome': 'Tifulano da Silva', 'email': 'vexg@emailteste.com', 'password': '1234', 'administrador': 'true'}</msg>
<status status="PASS" starttime="20230524 18:29:14.151" endtime="20230524 18:29:14.151"/>
</kw>
<kw name="Criar sessão na ServeRest" library="api_testing_usuarios">
<kw name="Create Dictionary" library="BuiltIn">
<var>${headers}</var>
<arg>accept=application/json</arg>
<arg>Content-Type=application/json</arg>
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<msg timestamp="20230524 18:29:14.152" level="INFO">${headers} = {'accept': 'application/json', 'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20230524 18:29:14.152" endtime="20230524 18:29:14.152"/>
</kw>
<kw name="Create Session" library="RequestsLibrary">
<arg>alias=ServeRest</arg>
<arg>url=https://serverest.dev</arg>
<arg>headers=${headers}</arg>
<doc>Create Session: create a HTTP session to a server</doc>
<msg timestamp="20230524 18:29:14.152" level="INFO">Creating Session using : alias=ServeRest, url=https://serverest.dev, headers={'accept': 'application/json', 'Content-Type': 'application/json'},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20230524 18:29:14.152" endtime="20230524 18:29:14.152"/>
</kw>
<status status="PASS" starttime="20230524 18:29:14.151" endtime="20230524 18:29:14.153"/>
</kw>
<kw name="POST On Session" library="RequestsLibrary">
<var>${resposta}</var>
<arg>alias=ServeRest</arg>
<arg>url=/usuarios</arg>
<arg>json=${bory}</arg>
<doc>Sends a POST request on a previously created HTTP Session.</doc>
<msg timestamp="20230524 18:29:14.859" level="INFO">POST Request : url=https://serverest.dev/usuarios 
 path_url=/usuarios 
 headers={'User-Agent': 'python-requests/2.25.1', 'Accept-Encoding': 'gzip, deflate', 'accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json', 'Content-Length': '106'} 
 body=b'{"nome": "Tifulano da Silva", "email": "vexg@emailteste.com", "password": "1234", "administrador": "true"}' 
 </msg>
<msg timestamp="20230524 18:29:14.860" level="INFO">POST Response : url=https://serverest.dev/usuarios 
 status=201, reason=Created 
 headers={'access-control-allow-origin': '*', 'x-dns-prefetch-control': 'off', 'x-frame-options': 'SAMEORIGIN', 'strict-transport-security': 'max-age=15552000; includeSubDomains', 'x-download-options': 'noopen', 'x-content-type-options': 'nosniff', 'x-xss-protection': '1; mode=block', 'x-moesif-transaction-id': '5c375590-688f-4270-8647-c3c294749f0c', 'content-type': 'application/json; charset=utf-8', 'X-Cloud-Trace-Context': '42da28db40d5b33cc3715f3480e229ff;o=1', 'Date': 'Wed, 24 May 2023 21:29:14 GMT', 'Server': 'Google Frontend', 'Content-Length': '82'} 
 body={
    "message": "Cadastro realizado com sucesso",
    "_id": "XcQ7ka1xLZ44csPy"
} 
 </msg>
<msg timestamp="20230524 18:29:14.860" level="INFO">/usr/lib/python3/dist-packages/urllib3/connectionpool.py:1015: InsecureRequestWarning: Unverified HTTPS request is being made to host 'serverest.dev'. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  warnings.warn(</msg>
<msg timestamp="20230524 18:29:14.860" level="INFO">${resposta} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20230524 18:29:14.153" endtime="20230524 18:29:14.860"/>
</kw>
<kw name="Log" library="BuiltIn">
<arg>${resposta.json()}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230524 18:29:14.863" level="INFO">{'message': 'Cadastro realizado com sucesso', '_id': 'XcQ7ka1xLZ44csPy'}</msg>
<status status="PASS" starttime="20230524 18:29:14.861" endtime="20230524 18:29:14.863"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${RESPOSTA}</arg>
<arg>${resposta.json()}</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<msg timestamp="20230524 18:29:14.864" level="INFO">${RESPOSTA} = {'message': 'Cadastro realizado com sucesso', '_id': 'XcQ7ka1xLZ44csPy'}</msg>
<status status="PASS" starttime="20230524 18:29:14.863" endtime="20230524 18:29:14.864"/>
</kw>
<status status="PASS" starttime="20230524 18:29:14.150" endtime="20230524 18:29:14.864"/>
</kw>
<kw name="Conferir se o usuário foi cadastrado corretamente" library="api_testing_usuarios">
<kw name="Log" library="BuiltIn">
<arg>${RESPOSTA}</arg>
<doc>Logs the given message with the given level.</doc>
<msg timestamp="20230524 18:29:14.865" level="INFO">{'message': 'Cadastro realizado com sucesso', '_id': 'XcQ7ka1xLZ44csPy'}</msg>
<status status="PASS" starttime="20230524 18:29:14.865" endtime="20230524 18:29:14.865"/>
</kw>
<kw name="Dictionary Should Contain Item" library="Collections">
<arg>${RESPOSTA}</arg>
<arg>message</arg>
<arg>Cadastro realizado com sucesso</arg>
<doc>An item of ``key`` / ``value`` must be found in a ``dictionary``.</doc>
<status status="PASS" starttime="20230524 18:29:14.865" endtime="20230524 18:29:14.865"/>
</kw>
<kw name="Dictionary Should Contain Key" library="Collections">
<arg>${RESPOSTA}</arg>
<arg>_id</arg>
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<status status="PASS" starttime="20230524 18:29:14.865" endtime="20230524 18:29:14.866"/>
</kw>
<status status="PASS" starttime="20230524 18:29:14.864" endtime="20230524 18:29:14.866"/>
</kw>
<status status="PASS" starttime="20230524 18:29:14.147" endtime="20230524 18:29:14.866"/>
</test>
<status status="PASS" starttime="20230524 18:29:14.070" endtime="20230524 18:29:14.866"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" skip="0" id="s1" name="Api Testing Usuarios">Api Testing Usuarios</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
